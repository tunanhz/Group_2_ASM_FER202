{"ast":null,"code":"import axios from 'axios';\n\n// Base URL cho JSON Server (chạy trên port 9999)\nconst BASE_URL = 'http://localhost:9999';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// API Service Functions\nexport const apiService = {\n  // Doctor related APIs\n  getDoctors: () => api.get('/Doctor'),\n  getDoctorById: id => api.get(`/Doctor/${id}`),\n  // Patient related APIs\n  getPatients: () => api.get('/Patient'),\n  getPatientById: id => api.get(`/Patient/${id}`),\n  // Appointment related APIs\n  getAppointments: () => api.get('/Appointment'),\n  getAppointmentById: id => api.get(`/Appointment/${id}`),\n  getAppointmentsByDoctorId: doctorId => api.get(`/Appointment?doctor_id=${doctorId}`),\n  getAppointmentsByDate: date => api.get(`/Appointment?appointment_datetime_like=${date}`),\n  updateAppointmentStatus: (id, status) => api.patch(`/Appointment/${id}`, {\n    status\n  }),\n  createAppointment: appointmentData => api.post('/Appointment', appointmentData),\n  // Waitlist related APIs\n  getWaitlist: () => api.get('/Waitlist'),\n  getWaitlistByDoctorId: doctorId => api.get(`/Waitlist?doctor_id=${doctorId}`),\n  updateWaitlistStatus: (id, status) => api.patch(`/Waitlist/${id}`, {\n    status\n  }),\n  updateWaitlistStatusAndVisitType: (id, status, visittype) => api.patch(`/Waitlist/${id}`, {\n    status,\n    visittype\n  }),\n  // ExamResult related APIs\n  getExamResults: () => api.get('/ExamResult'),\n  getExamResultsByDoctorId: doctorId => api.get(`/ExamResult?doctor_id=${doctorId}`),\n  getExamResultByMedicineRecordId: medicineRecordId => api.get(`/ExamResult?medicineRecord_id=${medicineRecordId}`),\n  createExamResult: examData => api.post('/ExamResult', examData),\n  updateExamResult: (id, examData) => api.patch(`/ExamResult/${id}`, examData),\n  // Medicine Records related APIs\n  getMedicineRecords: () => api.get('/MedicineRecords'),\n  getMedicineRecordByPatientId: patientId => api.get(`/MedicineRecords?patient_id=${patientId}`),\n  createMedicineRecord: recordData => api.post('/MedicineRecords', recordData),\n  // Room related APIs\n  getRooms: () => api.get('/Room'),\n  getRoomById: id => api.get(`/Room/${id}`),\n  // Medical Service related APIs\n  getMedicalServices: () => api.get('/ListOfMedicalService'),\n  getMedicalServiceById: id => api.get(`/ListOfMedicalService/${id}`),\n  // Service Order related APIs\n  getServiceOrders: () => api.get('/ServiceOrder'),\n  getServiceOrdersByDoctorId: doctorId => api.get(`/ServiceOrder?doctor_id=${doctorId}`),\n  createServiceOrder: orderData => api.post('/ServiceOrder', orderData),\n  // Service Order Item related APIs\n  getServiceOrderItems: () => api.get('/ServiceOrderItem'),\n  getServiceOrderItemsByDoctorId: doctorId => api.get(`/ServiceOrderItem?doctor_id=${doctorId}`),\n  getServiceOrderItemsByOrderId: orderId => api.get(`/ServiceOrderItem?service_order_id=${orderId}`),\n  createServiceOrderItem: itemData => api.post('/ServiceOrderItem', itemData),\n  // Results Of Paraclinical Services related APIs\n  getResultsOfParaclinicalServices: () => api.get('/ResultsOfParaclinicalServices'),\n  getResultByServiceOrderItemId: serviceOrderItemId => api.get(`/ResultsOfParaclinicalServices?service_order_item_id=${serviceOrderItemId}`),\n  createParaclinicalResult: resultData => api.post('/ResultsOfParaclinicalServices', resultData),\n  // Medicine related APIs\n  getMedicines: () => api.get('/Medicine'),\n  getMedicineById: id => api.get(`/Medicine/${id}`),\n  // Prescription related APIs\n  getPrescriptions: () => api.get('/Prescription'),\n  getPrescriptionsByDoctorId: doctorId => api.get(`/Prescription?doctor_id=${doctorId}`),\n  getPrescriptionsByMedicineRecordId: medicineRecordId => api.get(`/Prescription?medicineRecord_id=${medicineRecordId}`),\n  createPrescription: prescriptionData => api.post('/Prescription', prescriptionData),\n  updatePrescription: (id, prescriptionData) => api.patch(`/Prescription/${id}`, prescriptionData),\n  // Medicine Details (Medicines table) related APIs\n  getMedicineDetails: () => api.get('/Medicines'),\n  getMedicineDetailsByPrescriptionInvoiceId: prescriptionInvoiceId => api.get(`/Medicines?prescription_invoice_id=${prescriptionInvoiceId}`),\n  createMedicineDetail: medicineDetailData => api.post('/Medicines', medicineDetailData),\n  // Prescription Invoice related APIs\n  getPrescriptionInvoices: () => api.get('/PrescriptionInvoice'),\n  getPrescriptionInvoiceByPrescriptionId: prescriptionId => api.get(`/PrescriptionInvoice?prescription_id=${prescriptionId}`),\n  createPrescriptionInvoice: invoiceData => api.post('/PrescriptionInvoice', invoiceData),\n  // Invoice related APIs\n  getInvoices: () => api.get('/Invoice'),\n  getInvoiceById: id => api.get(`/Invoice/${id}`),\n  getInvoicesByPatientId: patientId => api.get(`/Invoice?patient_id=${patientId}`),\n  getInvoicesByMedicineRecordId: medicineRecordId => api.get(`/Invoice?medicineRecord_id=${medicineRecordId}`),\n  createInvoice: invoiceData => api.post('/Invoice', invoiceData),\n  updateInvoice: (id, invoiceData) => api.patch(`/Invoice/${id}`, invoiceData),\n  // Service Invoice related APIs\n  getServiceInvoices: () => api.get('/ServiceInvoice'),\n  getServiceInvoiceById: id => api.get(`/ServiceInvoice/${id}`),\n  getServiceInvoicesByInvoiceId: invoiceId => api.get(`/ServiceInvoice?invoice_id=${invoiceId}`),\n  getServiceInvoicesByServiceOrderItemId: serviceOrderItemId => api.get(`/ServiceInvoice?service_order_item_id=${serviceOrderItemId}`),\n  createServiceInvoice: serviceInvoiceData => api.post('/ServiceInvoice', serviceInvoiceData),\n  updateServiceInvoice: (id, serviceInvoiceData) => api.patch(`/ServiceInvoice/${id}`, serviceInvoiceData),\n  // Payment related APIs\n  getPayments: () => api.get('/Payment'),\n  getPaymentById: id => api.get(`/Payment/${id}`),\n  getPaymentsByInvoiceId: invoiceId => api.get(`/Payment?invoice_id=${invoiceId}`),\n  createPayment: paymentData => api.post('/Payment', paymentData),\n  updatePayment: (id, paymentData) => api.patch(`/Payment/${id}`, paymentData),\n  // Diagnosis related APIs\n  getDiagnosis: () => api.get('/Diagnosis'),\n  getDiagnosisByPatientId: patientId => api.get(`/Diagnosis?patient_id=${patientId}`),\n  getDiagnosisByMedicineRecordId: medicineRecordId => api.get(`/Diagnosis?medicineRecord_id=${medicineRecordId}`),\n  createDiagnosis: diagnosisData => api.post('/Diagnosis', diagnosisData),\n  // Prescription related APIs\n  getPrescriptions: () => api.get('/Prescription'),\n  getPrescriptionsByDoctorId: doctorId => api.get(`/Prescription?doctor_id=${doctorId}`),\n  // Receptionist related APIs\n  getReceptionists: () => api.get('/Receptionist'),\n  getReceptionistById: id => api.get(`/Receptionist/${id}`),\n  // Account related APIs\n  getAccountPatients: () => api.get('/AccountPatient'),\n  getAccountStaff: () => api.get('/AccountStaff')\n};\n\n// Helper functions for data processing\nexport const dataHelpers = {\n  // Get today's date in YYYY-MM-DD format\n  getTodayDate: () => {\n    const today = new Date();\n    return today.toISOString().split('T')[0];\n  },\n  // Filter appointments by date\n  filterAppointmentsByDate: (appointments, date) => {\n    return appointments.filter(appointment => appointment.appointment_datetime.startsWith(date));\n  },\n  // Filter appointments by status\n  filterAppointmentsByStatus: (appointments, status) => {\n    return appointments.filter(appointment => appointment.status.toLowerCase() === status.toLowerCase());\n  },\n  // Get appointment statistics\n  getAppointmentStats: appointments => {\n    const today = dataHelpers.getTodayDate();\n    const todayAppointments = dataHelpers.filterAppointmentsByDate(appointments, today);\n    return {\n      todayTotal: todayAppointments.length,\n      todayCompleted: dataHelpers.filterAppointmentsByStatus(todayAppointments, 'Completed').length,\n      todayPending: dataHelpers.filterAppointmentsByStatus(todayAppointments, 'Pending').length,\n      todayConfirmed: dataHelpers.filterAppointmentsByStatus(todayAppointments, 'Confirmed').length,\n      totalAppointments: appointments.length\n    };\n  },\n  // Format datetime for display\n  formatDateTime: dateTimeString => {\n    const date = new Date(dateTimeString);\n    return {\n      date: date.toLocaleDateString('vi-VN'),\n      time: date.toLocaleTimeString('vi-VN', {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false\n      }),\n      dayOfWeek: date.toLocaleDateString('vi-VN', {\n        weekday: 'long'\n      })\n    };\n  },\n  // Get status color\n  getStatusColor: status => {\n    switch (status === null || status === void 0 ? void 0 : status.toLowerCase()) {\n      case 'completed':\n        return '#10b981';\n      case 'confirmed':\n        return '#3b82f6';\n      case 'pending':\n        return '#f59e0b';\n      case 'cancelled':\n        return '#ef4444';\n      default:\n        return '#6b7280';\n    }\n  },\n  // Get status text in Vietnamese\n  getStatusText: status => {\n    switch (status === null || status === void 0 ? void 0 : status.toLowerCase()) {\n      case 'completed':\n        return 'Hoàn thành';\n      case 'confirmed':\n        return 'Đã xác nhận';\n      case 'pending':\n        return 'Chờ xác nhận';\n      case 'cancelled':\n        return 'Đã hủy';\n      default:\n        return 'Không xác định';\n    }\n  }\n};\n\n// Error handling wrapper\nexport const handleApiError = error => {\n  console.error('API Error:', error);\n  if (error.response) {\n    // Server responded with error status\n    return {\n      success: false,\n      message: `Lỗi server: ${error.response.status} - ${error.response.statusText}`,\n      data: null\n    };\n  } else if (error.request) {\n    // Request was made but no response received\n    return {\n      success: false,\n      message: 'Không thể kết nối đến server. Vui lòng kiểm tra kết nối mạng.',\n      data: null\n    };\n  } else {\n    // Something else happened\n    return {\n      success: false,\n      message: `Lỗi không xác định: ${error.message}`,\n      data: null\n    };\n  }\n};\n\n// Success response wrapper\nexport const handleApiSuccess = response => {\n  return {\n    success: true,\n    message: 'Thành công',\n    data: response.data\n  };\n};\n\n// Simplified export functions for components\nexport const getDoctors = () => apiService.getDoctors().then(handleApiSuccess).catch(handleApiError);\nexport const getPatients = () => apiService.getPatients().then(handleApiSuccess).catch(handleApiError);\nexport const getAppointments = () => apiService.getAppointments().then(handleApiSuccess).catch(handleApiError);\nexport const getDiagnosis = () => apiService.getDiagnosis().then(handleApiSuccess).catch(handleApiError);\nexport const getDiagnosisByMedicineRecordId = medicineRecordId => apiService.getDiagnosisByMedicineRecordId(medicineRecordId).then(handleApiSuccess).catch(handleApiError);\nexport const createDiagnosis = diagnosisData => apiService.createDiagnosis(diagnosisData).then(handleApiSuccess).catch(handleApiError);\nexport const updateAppointmentStatus = (id, status) => apiService.updateAppointmentStatus(id, status).then(handleApiSuccess).catch(handleApiError);\nexport const createAppointment = appointmentData => apiService.createAppointment(appointmentData).then(handleApiSuccess).catch(handleApiError);\n\n// Waitlist simplified functions\nexport const getWaitlist = () => apiService.getWaitlist().then(handleApiSuccess).catch(handleApiError);\nexport const getWaitlistByDoctorId = doctorId => apiService.getWaitlistByDoctorId(doctorId).then(handleApiSuccess).catch(handleApiError);\nexport const updateWaitlistStatus = (id, status) => apiService.updateWaitlistStatus(id, status).then(handleApiSuccess).catch(handleApiError);\nexport const updateWaitlistStatusAndVisitType = (id, status, visittype) => apiService.updateWaitlistStatusAndVisitType(id, status, visittype).then(handleApiSuccess).catch(handleApiError);\n\n// ExamResult simplified functions\nexport const getExamResults = () => apiService.getExamResults().then(handleApiSuccess).catch(handleApiError);\nexport const getExamResultsByDoctorId = doctorId => apiService.getExamResultsByDoctorId(doctorId).then(handleApiSuccess).catch(handleApiError);\nexport const getExamResultByMedicineRecordId = medicineRecordId => apiService.getExamResultByMedicineRecordId(medicineRecordId).then(handleApiSuccess).catch(handleApiError);\nexport const createExamResult = examData => apiService.createExamResult(examData).then(handleApiSuccess).catch(handleApiError);\n\n// Medicine Records simplified functions\nexport const getMedicineRecords = () => apiService.getMedicineRecords().then(handleApiSuccess).catch(handleApiError);\nexport const getMedicineRecordByPatientId = patientId => apiService.getMedicineRecordByPatientId(patientId).then(handleApiSuccess).catch(handleApiError);\nexport const createMedicineRecord = recordData => apiService.createMedicineRecord(recordData).then(handleApiSuccess).catch(handleApiError);\n\n// Room simplified functions\nexport const getRooms = () => apiService.getRooms().then(handleApiSuccess).catch(handleApiError);\n\n// Medical Service simplified functions\nexport const getMedicalServices = () => apiService.getMedicalServices().then(handleApiSuccess).catch(handleApiError);\nexport const getMedicalServiceById = id => apiService.getMedicalServiceById(id).then(handleApiSuccess).catch(handleApiError);\n\n// Service Order simplified functions\nexport const getServiceOrders = () => apiService.getServiceOrders().then(handleApiSuccess).catch(handleApiError);\nexport const getServiceOrdersByDoctorId = doctorId => apiService.getServiceOrdersByDoctorId(doctorId).then(handleApiSuccess).catch(handleApiError);\nexport const createServiceOrder = orderData => apiService.createServiceOrder(orderData).then(handleApiSuccess).catch(handleApiError);\n\n// Service Order Item simplified functions\nexport const getServiceOrderItems = () => apiService.getServiceOrderItems().then(handleApiSuccess).catch(handleApiError);\nexport const getServiceOrderItemsByDoctorId = doctorId => apiService.getServiceOrderItemsByDoctorId(doctorId).then(handleApiSuccess).catch(handleApiError);\nexport const getServiceOrderItemsByOrderId = orderId => apiService.getServiceOrderItemsByOrderId(orderId).then(handleApiSuccess).catch(handleApiError);\nexport const createServiceOrderItem = itemData => apiService.createServiceOrderItem(itemData).then(handleApiSuccess).catch(handleApiError);\n\n// Results Of Paraclinical Services simplified functions\nexport const getResultsOfParaclinicalServices = () => apiService.getResultsOfParaclinicalServices().then(handleApiSuccess).catch(handleApiError);\nexport const getResultByServiceOrderItemId = serviceOrderItemId => apiService.getResultByServiceOrderItemId(serviceOrderItemId).then(handleApiSuccess).catch(handleApiError);\nexport const createParaclinicalResult = resultData => apiService.createParaclinicalResult(resultData).then(handleApiSuccess).catch(handleApiError);\n\n// Medicine simplified functions\nexport const getMedicines = () => apiService.getMedicines().then(handleApiSuccess).catch(handleApiError);\nexport const getMedicineById = id => apiService.getMedicineById(id).then(handleApiSuccess).catch(handleApiError);\n\n// Prescription simplified functions\nexport const getPrescriptions = () => apiService.getPrescriptions().then(handleApiSuccess).catch(handleApiError);\nexport const getPrescriptionsByDoctorId = doctorId => apiService.getPrescriptionsByDoctorId(doctorId).then(handleApiSuccess).catch(handleApiError);\nexport const getPrescriptionsByMedicineRecordId = medicineRecordId => apiService.getPrescriptionsByMedicineRecordId(medicineRecordId).then(handleApiSuccess).catch(handleApiError);\nexport const createPrescription = prescriptionData => apiService.createPrescription(prescriptionData).then(handleApiSuccess).catch(handleApiError);\nexport const updatePrescription = (id, prescriptionData) => apiService.updatePrescription(id, prescriptionData).then(handleApiSuccess).catch(handleApiError);\n\n// Medicine Details simplified functions\nexport const getMedicineDetails = () => apiService.getMedicineDetails().then(handleApiSuccess).catch(handleApiError);\nexport const getMedicineDetailsByPrescriptionInvoiceId = prescriptionInvoiceId => apiService.getMedicineDetailsByPrescriptionInvoiceId(prescriptionInvoiceId).then(handleApiSuccess).catch(handleApiError);\nexport const createMedicineDetail = medicineDetailData => apiService.createMedicineDetail(medicineDetailData).then(handleApiSuccess).catch(handleApiError);\n\n// Prescription Invoice simplified functions\nexport const getPrescriptionInvoices = () => apiService.getPrescriptionInvoices().then(handleApiSuccess).catch(handleApiError);\nexport const getPrescriptionInvoiceByPrescriptionId = prescriptionId => apiService.getPrescriptionInvoiceByPrescriptionId(prescriptionId).then(handleApiSuccess).catch(handleApiError);\nexport const createPrescriptionInvoice = invoiceData => apiService.createPrescriptionInvoice(invoiceData).then(handleApiSuccess).catch(handleApiError);\n\n// Invoice simplified functions\nexport const getInvoices = () => apiService.getInvoices().then(handleApiSuccess).catch(handleApiError);\nexport const getInvoiceById = id => apiService.getInvoiceById(id).then(handleApiSuccess).catch(handleApiError);\nexport const getInvoicesByPatientId = patientId => apiService.getInvoicesByPatientId(patientId).then(handleApiSuccess).catch(handleApiError);\nexport const getInvoicesByMedicineRecordId = medicineRecordId => apiService.getInvoicesByMedicineRecordId(medicineRecordId).then(handleApiSuccess).catch(handleApiError);\nexport const createInvoice = invoiceData => apiService.createInvoice(invoiceData).then(handleApiSuccess).catch(handleApiError);\nexport const updateInvoice = (id, invoiceData) => apiService.updateInvoice(id, invoiceData).then(handleApiSuccess).catch(handleApiError);\n\n// Service Invoice simplified functions\nexport const getServiceInvoices = () => apiService.getServiceInvoices().then(handleApiSuccess).catch(handleApiError);\nexport const getServiceInvoiceById = id => apiService.getServiceInvoiceById(id).then(handleApiSuccess).catch(handleApiError);\nexport const getServiceInvoicesByInvoiceId = invoiceId => apiService.getServiceInvoicesByInvoiceId(invoiceId).then(handleApiSuccess).catch(handleApiError);\nexport const getServiceInvoicesByServiceOrderItemId = serviceOrderItemId => apiService.getServiceInvoicesByServiceOrderItemId(serviceOrderItemId).then(handleApiSuccess).catch(handleApiError);\nexport const createServiceInvoice = serviceInvoiceData => apiService.createServiceInvoice(serviceInvoiceData).then(handleApiSuccess).catch(handleApiError);\nexport const updateServiceInvoice = (id, serviceInvoiceData) => apiService.updateServiceInvoice(id, serviceInvoiceData).then(handleApiSuccess).catch(handleApiError);\n\n// Payment simplified functions\nexport const getPayments = () => apiService.getPayments().then(handleApiSuccess).catch(handleApiError);\nexport const getPaymentById = id => apiService.getPaymentById(id).then(handleApiSuccess).catch(handleApiError);\nexport const getPaymentsByInvoiceId = invoiceId => apiService.getPaymentsByInvoiceId(invoiceId).then(handleApiSuccess).catch(handleApiError);\nexport const createPayment = paymentData => apiService.createPayment(paymentData).then(handleApiSuccess).catch(handleApiError);\nexport const updatePayment = (id, paymentData) => apiService.updatePayment(id, paymentData).then(handleApiSuccess).catch(handleApiError);\n\n// Patient-specific helper functions\nexport const getPatientAppointments = (appointments, patientId) => {\n  return appointments.filter(appointment => appointment.patient_id === patientId).sort((a, b) => new Date(b.appointment_datetime) - new Date(a.appointment_datetime));\n};\nexport const getPatientDiagnosis = (diagnosis, patientId) => {\n  // For diagnosis, we need to find matching through medicineRecord_id or patient relation\n  // Since we don't have direct patient_id in diagnosis, we'll return all for now\n  return diagnosis.slice(0, 5); // Return first 5 diagnosis as example\n};\nexport const getPatientStats = (appointments, diagnosis, patientId) => {\n  const patientAppointments = getPatientAppointments(appointments, patientId);\n  const patientDiagnosis = getPatientDiagnosis(diagnosis, patientId);\n  return {\n    totalAppointments: patientAppointments.length,\n    completedAppointments: patientAppointments.filter(apt => apt.status === 'Completed').length,\n    pendingAppointments: patientAppointments.filter(apt => apt.status === 'Pending').length,\n    confirmedAppointments: patientAppointments.filter(apt => apt.status === 'Confirmed').length,\n    totalDiagnosis: patientDiagnosis.length\n  };\n};\nexport default api;","map":{"version":3,"names":["axios","BASE_URL","api","create","baseURL","timeout","headers","apiService","getDoctors","get","getDoctorById","id","getPatients","getPatientById","getAppointments","getAppointmentById","getAppointmentsByDoctorId","doctorId","getAppointmentsByDate","date","updateAppointmentStatus","status","patch","createAppointment","appointmentData","post","getWaitlist","getWaitlistByDoctorId","updateWaitlistStatus","updateWaitlistStatusAndVisitType","visittype","getExamResults","getExamResultsByDoctorId","getExamResultByMedicineRecordId","medicineRecordId","createExamResult","examData","updateExamResult","getMedicineRecords","getMedicineRecordByPatientId","patientId","createMedicineRecord","recordData","getRooms","getRoomById","getMedicalServices","getMedicalServiceById","getServiceOrders","getServiceOrdersByDoctorId","createServiceOrder","orderData","getServiceOrderItems","getServiceOrderItemsByDoctorId","getServiceOrderItemsByOrderId","orderId","createServiceOrderItem","itemData","getResultsOfParaclinicalServices","getResultByServiceOrderItemId","serviceOrderItemId","createParaclinicalResult","resultData","getMedicines","getMedicineById","getPrescriptions","getPrescriptionsByDoctorId","getPrescriptionsByMedicineRecordId","createPrescription","prescriptionData","updatePrescription","getMedicineDetails","getMedicineDetailsByPrescriptionInvoiceId","prescriptionInvoiceId","createMedicineDetail","medicineDetailData","getPrescriptionInvoices","getPrescriptionInvoiceByPrescriptionId","prescriptionId","createPrescriptionInvoice","invoiceData","getInvoices","getInvoiceById","getInvoicesByPatientId","getInvoicesByMedicineRecordId","createInvoice","updateInvoice","getServiceInvoices","getServiceInvoiceById","getServiceInvoicesByInvoiceId","invoiceId","getServiceInvoicesByServiceOrderItemId","createServiceInvoice","serviceInvoiceData","updateServiceInvoice","getPayments","getPaymentById","getPaymentsByInvoiceId","createPayment","paymentData","updatePayment","getDiagnosis","getDiagnosisByPatientId","getDiagnosisByMedicineRecordId","createDiagnosis","diagnosisData","getReceptionists","getReceptionistById","getAccountPatients","getAccountStaff","dataHelpers","getTodayDate","today","Date","toISOString","split","filterAppointmentsByDate","appointments","filter","appointment","appointment_datetime","startsWith","filterAppointmentsByStatus","toLowerCase","getAppointmentStats","todayAppointments","todayTotal","length","todayCompleted","todayPending","todayConfirmed","totalAppointments","formatDateTime","dateTimeString","toLocaleDateString","time","toLocaleTimeString","hour","minute","hour12","dayOfWeek","weekday","getStatusColor","getStatusText","handleApiError","error","console","response","success","message","statusText","data","request","handleApiSuccess","then","catch","getPatientAppointments","patient_id","sort","a","b","getPatientDiagnosis","diagnosis","slice","getPatientStats","patientAppointments","patientDiagnosis","completedAppointments","apt","pendingAppointments","confirmedAppointments","totalDiagnosis"],"sources":["C:/Users/asus/Desktop/ASM_FER202/Group_2_ASM_FER202/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Base URL cho JSON Server (chạy trên port 9999)\nconst BASE_URL = 'http://localhost:9999';\n\n// Create axios instance\nconst api = axios.create({\n    baseURL: BASE_URL,\n    timeout: 10000,\n    headers: {\n        'Content-Type': 'application/json',\n    }\n});\n\n// API Service Functions\nexport const apiService = {\n    // Doctor related APIs\n    getDoctors: () => api.get('/Doctor'),\n    getDoctorById: (id) => api.get(`/Doctor/${id}`),\n    \n    // Patient related APIs\n    getPatients: () => api.get('/Patient'),\n    getPatientById: (id) => api.get(`/Patient/${id}`),\n    \n    // Appointment related APIs\n    getAppointments: () => api.get('/Appointment'),\n    getAppointmentById: (id) => api.get(`/Appointment/${id}`),\n    getAppointmentsByDoctorId: (doctorId) => api.get(`/Appointment?doctor_id=${doctorId}`),\n    getAppointmentsByDate: (date) => api.get(`/Appointment?appointment_datetime_like=${date}`),\n    updateAppointmentStatus: (id, status) => api.patch(`/Appointment/${id}`, { status }),\n    createAppointment: (appointmentData) => api.post('/Appointment', appointmentData),\n    \n    // Waitlist related APIs\n    getWaitlist: () => api.get('/Waitlist'),\n    getWaitlistByDoctorId: (doctorId) => api.get(`/Waitlist?doctor_id=${doctorId}`),\n    updateWaitlistStatus: (id, status) => api.patch(`/Waitlist/${id}`, { status }),\n    updateWaitlistStatusAndVisitType: (id, status, visittype) => api.patch(`/Waitlist/${id}`, { status, visittype }),\n    \n    // ExamResult related APIs\n    getExamResults: () => api.get('/ExamResult'),\n    getExamResultsByDoctorId: (doctorId) => api.get(`/ExamResult?doctor_id=${doctorId}`),\n    getExamResultByMedicineRecordId: (medicineRecordId) => api.get(`/ExamResult?medicineRecord_id=${medicineRecordId}`),\n    createExamResult: (examData) => api.post('/ExamResult', examData),\n    updateExamResult: (id, examData) => api.patch(`/ExamResult/${id}`, examData),\n    \n    // Medicine Records related APIs\n    getMedicineRecords: () => api.get('/MedicineRecords'),\n    getMedicineRecordByPatientId: (patientId) => api.get(`/MedicineRecords?patient_id=${patientId}`),\n    createMedicineRecord: (recordData) => api.post('/MedicineRecords', recordData),\n    \n    // Room related APIs\n    getRooms: () => api.get('/Room'),\n    getRoomById: (id) => api.get(`/Room/${id}`),\n\n    // Medical Service related APIs\n    getMedicalServices: () => api.get('/ListOfMedicalService'),\n    getMedicalServiceById: (id) => api.get(`/ListOfMedicalService/${id}`),\n\n    // Service Order related APIs\n    getServiceOrders: () => api.get('/ServiceOrder'),\n    getServiceOrdersByDoctorId: (doctorId) => api.get(`/ServiceOrder?doctor_id=${doctorId}`),\n    createServiceOrder: (orderData) => api.post('/ServiceOrder', orderData),\n\n    // Service Order Item related APIs\n    getServiceOrderItems: () => api.get('/ServiceOrderItem'),\n    getServiceOrderItemsByDoctorId: (doctorId) => api.get(`/ServiceOrderItem?doctor_id=${doctorId}`),\n    getServiceOrderItemsByOrderId: (orderId) => api.get(`/ServiceOrderItem?service_order_id=${orderId}`),\n    createServiceOrderItem: (itemData) => api.post('/ServiceOrderItem', itemData),\n\n    // Results Of Paraclinical Services related APIs\n    getResultsOfParaclinicalServices: () => api.get('/ResultsOfParaclinicalServices'),\n    getResultByServiceOrderItemId: (serviceOrderItemId) => api.get(`/ResultsOfParaclinicalServices?service_order_item_id=${serviceOrderItemId}`),\n    createParaclinicalResult: (resultData) => api.post('/ResultsOfParaclinicalServices', resultData),\n\n    // Medicine related APIs\n    getMedicines: () => api.get('/Medicine'),\n    getMedicineById: (id) => api.get(`/Medicine/${id}`),\n\n    // Prescription related APIs\n    getPrescriptions: () => api.get('/Prescription'),\n    getPrescriptionsByDoctorId: (doctorId) => api.get(`/Prescription?doctor_id=${doctorId}`),\n    getPrescriptionsByMedicineRecordId: (medicineRecordId) => api.get(`/Prescription?medicineRecord_id=${medicineRecordId}`),\n    createPrescription: (prescriptionData) => api.post('/Prescription', prescriptionData),\n    updatePrescription: (id, prescriptionData) => api.patch(`/Prescription/${id}`, prescriptionData),\n\n    // Medicine Details (Medicines table) related APIs\n    getMedicineDetails: () => api.get('/Medicines'),\n    getMedicineDetailsByPrescriptionInvoiceId: (prescriptionInvoiceId) => api.get(`/Medicines?prescription_invoice_id=${prescriptionInvoiceId}`),\n    createMedicineDetail: (medicineDetailData) => api.post('/Medicines', medicineDetailData),\n\n    // Prescription Invoice related APIs\n    getPrescriptionInvoices: () => api.get('/PrescriptionInvoice'),\n    getPrescriptionInvoiceByPrescriptionId: (prescriptionId) => api.get(`/PrescriptionInvoice?prescription_id=${prescriptionId}`),\n    createPrescriptionInvoice: (invoiceData) => api.post('/PrescriptionInvoice', invoiceData),\n    \n    // Invoice related APIs\n    getInvoices: () => api.get('/Invoice'),\n    getInvoiceById: (id) => api.get(`/Invoice/${id}`),\n    getInvoicesByPatientId: (patientId) => api.get(`/Invoice?patient_id=${patientId}`),\n    getInvoicesByMedicineRecordId: (medicineRecordId) => api.get(`/Invoice?medicineRecord_id=${medicineRecordId}`),\n    createInvoice: (invoiceData) => api.post('/Invoice', invoiceData),\n    updateInvoice: (id, invoiceData) => api.patch(`/Invoice/${id}`, invoiceData),\n\n    // Service Invoice related APIs\n    getServiceInvoices: () => api.get('/ServiceInvoice'),\n    getServiceInvoiceById: (id) => api.get(`/ServiceInvoice/${id}`),\n    getServiceInvoicesByInvoiceId: (invoiceId) => api.get(`/ServiceInvoice?invoice_id=${invoiceId}`),\n    getServiceInvoicesByServiceOrderItemId: (serviceOrderItemId) => api.get(`/ServiceInvoice?service_order_item_id=${serviceOrderItemId}`),\n    createServiceInvoice: (serviceInvoiceData) => api.post('/ServiceInvoice', serviceInvoiceData),\n    updateServiceInvoice: (id, serviceInvoiceData) => api.patch(`/ServiceInvoice/${id}`, serviceInvoiceData),\n\n    // Payment related APIs\n    getPayments: () => api.get('/Payment'),\n    getPaymentById: (id) => api.get(`/Payment/${id}`),\n    getPaymentsByInvoiceId: (invoiceId) => api.get(`/Payment?invoice_id=${invoiceId}`),\n    createPayment: (paymentData) => api.post('/Payment', paymentData),\n    updatePayment: (id, paymentData) => api.patch(`/Payment/${id}`, paymentData),\n    \n    // Diagnosis related APIs\n    getDiagnosis: () => api.get('/Diagnosis'),\n    getDiagnosisByPatientId: (patientId) => api.get(`/Diagnosis?patient_id=${patientId}`),\n    getDiagnosisByMedicineRecordId: (medicineRecordId) => api.get(`/Diagnosis?medicineRecord_id=${medicineRecordId}`),\n    createDiagnosis: (diagnosisData) => api.post('/Diagnosis', diagnosisData),\n    \n    // Prescription related APIs\n    getPrescriptions: () => api.get('/Prescription'),\n    getPrescriptionsByDoctorId: (doctorId) => api.get(`/Prescription?doctor_id=${doctorId}`),\n    \n    // Receptionist related APIs\n    getReceptionists: () => api.get('/Receptionist'),\n    getReceptionistById: (id) => api.get(`/Receptionist/${id}`),\n    \n    // Account related APIs\n    getAccountPatients: () => api.get('/AccountPatient'),\n    getAccountStaff: () => api.get('/AccountStaff'),\n};\n\n// Helper functions for data processing\nexport const dataHelpers = {\n    // Get today's date in YYYY-MM-DD format\n    getTodayDate: () => {\n        const today = new Date();\n        return today.toISOString().split('T')[0];\n    },\n    \n    // Filter appointments by date\n    filterAppointmentsByDate: (appointments, date) => {\n        return appointments.filter(appointment => \n            appointment.appointment_datetime.startsWith(date)\n        );\n    },\n    \n    // Filter appointments by status\n    filterAppointmentsByStatus: (appointments, status) => {\n        return appointments.filter(appointment => \n            appointment.status.toLowerCase() === status.toLowerCase()\n        );\n    },\n    \n    // Get appointment statistics\n    getAppointmentStats: (appointments) => {\n        const today = dataHelpers.getTodayDate();\n        const todayAppointments = dataHelpers.filterAppointmentsByDate(appointments, today);\n        \n        return {\n            todayTotal: todayAppointments.length,\n            todayCompleted: dataHelpers.filterAppointmentsByStatus(todayAppointments, 'Completed').length,\n            todayPending: dataHelpers.filterAppointmentsByStatus(todayAppointments, 'Pending').length,\n            todayConfirmed: dataHelpers.filterAppointmentsByStatus(todayAppointments, 'Confirmed').length,\n            totalAppointments: appointments.length\n        };\n    },\n    \n    // Format datetime for display\n    formatDateTime: (dateTimeString) => {\n        const date = new Date(dateTimeString);\n        return {\n            date: date.toLocaleDateString('vi-VN'),\n            time: date.toLocaleTimeString('vi-VN', { \n                hour: '2-digit', \n                minute: '2-digit',\n                hour12: false \n            }),\n            dayOfWeek: date.toLocaleDateString('vi-VN', { weekday: 'long' })\n        };\n    },\n    \n    // Get status color\n    getStatusColor: (status) => {\n        switch(status?.toLowerCase()) {\n            case 'completed': return '#10b981';\n            case 'confirmed': return '#3b82f6';\n            case 'pending': return '#f59e0b';\n            case 'cancelled': return '#ef4444';\n            default: return '#6b7280';\n        }\n    },\n    \n    // Get status text in Vietnamese\n    getStatusText: (status) => {\n        switch(status?.toLowerCase()) {\n            case 'completed': return 'Hoàn thành';\n            case 'confirmed': return 'Đã xác nhận';\n            case 'pending': return 'Chờ xác nhận';\n            case 'cancelled': return 'Đã hủy';\n            default: return 'Không xác định';\n        }\n    }\n};\n\n// Error handling wrapper\nexport const handleApiError = (error) => {\n    console.error('API Error:', error);\n    \n    if (error.response) {\n        // Server responded with error status\n        return {\n            success: false,\n            message: `Lỗi server: ${error.response.status} - ${error.response.statusText}`,\n            data: null\n        };\n    } else if (error.request) {\n        // Request was made but no response received\n        return {\n            success: false,\n            message: 'Không thể kết nối đến server. Vui lòng kiểm tra kết nối mạng.',\n            data: null\n        };\n    } else {\n        // Something else happened\n        return {\n            success: false,\n            message: `Lỗi không xác định: ${error.message}`,\n            data: null\n        };\n    }\n};\n\n// Success response wrapper\nexport const handleApiSuccess = (response) => {\n    return {\n        success: true,\n        message: 'Thành công',\n        data: response.data\n    };\n};\n\n// Simplified export functions for components\nexport const getDoctors = () => apiService.getDoctors().then(handleApiSuccess).catch(handleApiError);\nexport const getPatients = () => apiService.getPatients().then(handleApiSuccess).catch(handleApiError);\nexport const getAppointments = () => apiService.getAppointments().then(handleApiSuccess).catch(handleApiError);\nexport const getDiagnosis = () => apiService.getDiagnosis().then(handleApiSuccess).catch(handleApiError);\nexport const getDiagnosisByMedicineRecordId = (medicineRecordId) => apiService.getDiagnosisByMedicineRecordId(medicineRecordId).then(handleApiSuccess).catch(handleApiError);\nexport const createDiagnosis = (diagnosisData) => apiService.createDiagnosis(diagnosisData).then(handleApiSuccess).catch(handleApiError);\nexport const updateAppointmentStatus = (id, status) => apiService.updateAppointmentStatus(id, status).then(handleApiSuccess).catch(handleApiError);\nexport const createAppointment = (appointmentData) => apiService.createAppointment(appointmentData).then(handleApiSuccess).catch(handleApiError);\n\n// Waitlist simplified functions\nexport const getWaitlist = () => apiService.getWaitlist().then(handleApiSuccess).catch(handleApiError);\nexport const getWaitlistByDoctorId = (doctorId) => apiService.getWaitlistByDoctorId(doctorId).then(handleApiSuccess).catch(handleApiError);\nexport const updateWaitlistStatus = (id, status) => apiService.updateWaitlistStatus(id, status).then(handleApiSuccess).catch(handleApiError);\nexport const updateWaitlistStatusAndVisitType = (id, status, visittype) => apiService.updateWaitlistStatusAndVisitType(id, status, visittype).then(handleApiSuccess).catch(handleApiError);\n\n// ExamResult simplified functions\nexport const getExamResults = () => apiService.getExamResults().then(handleApiSuccess).catch(handleApiError);\nexport const getExamResultsByDoctorId = (doctorId) => apiService.getExamResultsByDoctorId(doctorId).then(handleApiSuccess).catch(handleApiError);\nexport const getExamResultByMedicineRecordId = (medicineRecordId) => apiService.getExamResultByMedicineRecordId(medicineRecordId).then(handleApiSuccess).catch(handleApiError);\nexport const createExamResult = (examData) => apiService.createExamResult(examData).then(handleApiSuccess).catch(handleApiError);\n\n// Medicine Records simplified functions\nexport const getMedicineRecords = () => apiService.getMedicineRecords().then(handleApiSuccess).catch(handleApiError);\nexport const getMedicineRecordByPatientId = (patientId) => apiService.getMedicineRecordByPatientId(patientId).then(handleApiSuccess).catch(handleApiError);\nexport const createMedicineRecord = (recordData) => apiService.createMedicineRecord(recordData).then(handleApiSuccess).catch(handleApiError);\n\n// Room simplified functions\nexport const getRooms = () => apiService.getRooms().then(handleApiSuccess).catch(handleApiError);\n\n// Medical Service simplified functions\nexport const getMedicalServices = () => apiService.getMedicalServices().then(handleApiSuccess).catch(handleApiError);\nexport const getMedicalServiceById = (id) => apiService.getMedicalServiceById(id).then(handleApiSuccess).catch(handleApiError);\n\n// Service Order simplified functions\nexport const getServiceOrders = () => apiService.getServiceOrders().then(handleApiSuccess).catch(handleApiError);\nexport const getServiceOrdersByDoctorId = (doctorId) => apiService.getServiceOrdersByDoctorId(doctorId).then(handleApiSuccess).catch(handleApiError);\nexport const createServiceOrder = (orderData) => apiService.createServiceOrder(orderData).then(handleApiSuccess).catch(handleApiError);\n\n// Service Order Item simplified functions\nexport const getServiceOrderItems = () => apiService.getServiceOrderItems().then(handleApiSuccess).catch(handleApiError);\nexport const getServiceOrderItemsByDoctorId = (doctorId) => apiService.getServiceOrderItemsByDoctorId(doctorId).then(handleApiSuccess).catch(handleApiError);\nexport const getServiceOrderItemsByOrderId = (orderId) => apiService.getServiceOrderItemsByOrderId(orderId).then(handleApiSuccess).catch(handleApiError);\nexport const createServiceOrderItem = (itemData) => apiService.createServiceOrderItem(itemData).then(handleApiSuccess).catch(handleApiError);\n\n// Results Of Paraclinical Services simplified functions\nexport const getResultsOfParaclinicalServices = () => apiService.getResultsOfParaclinicalServices().then(handleApiSuccess).catch(handleApiError);\nexport const getResultByServiceOrderItemId = (serviceOrderItemId) => apiService.getResultByServiceOrderItemId(serviceOrderItemId).then(handleApiSuccess).catch(handleApiError);\nexport const createParaclinicalResult = (resultData) => apiService.createParaclinicalResult(resultData).then(handleApiSuccess).catch(handleApiError);\n\n// Medicine simplified functions\nexport const getMedicines = () => apiService.getMedicines().then(handleApiSuccess).catch(handleApiError);\nexport const getMedicineById = (id) => apiService.getMedicineById(id).then(handleApiSuccess).catch(handleApiError);\n\n// Prescription simplified functions\nexport const getPrescriptions = () => apiService.getPrescriptions().then(handleApiSuccess).catch(handleApiError);\nexport const getPrescriptionsByDoctorId = (doctorId) => apiService.getPrescriptionsByDoctorId(doctorId).then(handleApiSuccess).catch(handleApiError);\nexport const getPrescriptionsByMedicineRecordId = (medicineRecordId) => apiService.getPrescriptionsByMedicineRecordId(medicineRecordId).then(handleApiSuccess).catch(handleApiError);\nexport const createPrescription = (prescriptionData) => apiService.createPrescription(prescriptionData).then(handleApiSuccess).catch(handleApiError);\nexport const updatePrescription = (id, prescriptionData) => apiService.updatePrescription(id, prescriptionData).then(handleApiSuccess).catch(handleApiError);\n\n// Medicine Details simplified functions\nexport const getMedicineDetails = () => apiService.getMedicineDetails().then(handleApiSuccess).catch(handleApiError);\nexport const getMedicineDetailsByPrescriptionInvoiceId = (prescriptionInvoiceId) => apiService.getMedicineDetailsByPrescriptionInvoiceId(prescriptionInvoiceId).then(handleApiSuccess).catch(handleApiError);\nexport const createMedicineDetail = (medicineDetailData) => apiService.createMedicineDetail(medicineDetailData).then(handleApiSuccess).catch(handleApiError);\n\n// Prescription Invoice simplified functions\nexport const getPrescriptionInvoices = () => apiService.getPrescriptionInvoices().then(handleApiSuccess).catch(handleApiError);\nexport const getPrescriptionInvoiceByPrescriptionId = (prescriptionId) => apiService.getPrescriptionInvoiceByPrescriptionId(prescriptionId).then(handleApiSuccess).catch(handleApiError);\nexport const createPrescriptionInvoice = (invoiceData) => apiService.createPrescriptionInvoice(invoiceData).then(handleApiSuccess).catch(handleApiError);\n\n// Invoice simplified functions\nexport const getInvoices = () => apiService.getInvoices().then(handleApiSuccess).catch(handleApiError);\nexport const getInvoiceById = (id) => apiService.getInvoiceById(id).then(handleApiSuccess).catch(handleApiError);\nexport const getInvoicesByPatientId = (patientId) => apiService.getInvoicesByPatientId(patientId).then(handleApiSuccess).catch(handleApiError);\nexport const getInvoicesByMedicineRecordId = (medicineRecordId) => apiService.getInvoicesByMedicineRecordId(medicineRecordId).then(handleApiSuccess).catch(handleApiError);\nexport const createInvoice = (invoiceData) => apiService.createInvoice(invoiceData).then(handleApiSuccess).catch(handleApiError);\nexport const updateInvoice = (id, invoiceData) => apiService.updateInvoice(id, invoiceData).then(handleApiSuccess).catch(handleApiError);\n\n// Service Invoice simplified functions\nexport const getServiceInvoices = () => apiService.getServiceInvoices().then(handleApiSuccess).catch(handleApiError);\nexport const getServiceInvoiceById = (id) => apiService.getServiceInvoiceById(id).then(handleApiSuccess).catch(handleApiError);\nexport const getServiceInvoicesByInvoiceId = (invoiceId) => apiService.getServiceInvoicesByInvoiceId(invoiceId).then(handleApiSuccess).catch(handleApiError);\nexport const getServiceInvoicesByServiceOrderItemId = (serviceOrderItemId) => apiService.getServiceInvoicesByServiceOrderItemId(serviceOrderItemId).then(handleApiSuccess).catch(handleApiError);\nexport const createServiceInvoice = (serviceInvoiceData) => apiService.createServiceInvoice(serviceInvoiceData).then(handleApiSuccess).catch(handleApiError);\nexport const updateServiceInvoice = (id, serviceInvoiceData) => apiService.updateServiceInvoice(id, serviceInvoiceData).then(handleApiSuccess).catch(handleApiError);\n\n// Payment simplified functions\nexport const getPayments = () => apiService.getPayments().then(handleApiSuccess).catch(handleApiError);\nexport const getPaymentById = (id) => apiService.getPaymentById(id).then(handleApiSuccess).catch(handleApiError);\nexport const getPaymentsByInvoiceId = (invoiceId) => apiService.getPaymentsByInvoiceId(invoiceId).then(handleApiSuccess).catch(handleApiError);\nexport const createPayment = (paymentData) => apiService.createPayment(paymentData).then(handleApiSuccess).catch(handleApiError);\nexport const updatePayment = (id, paymentData) => apiService.updatePayment(id, paymentData).then(handleApiSuccess).catch(handleApiError);\n\n// Patient-specific helper functions\nexport const getPatientAppointments = (appointments, patientId) => {\n    return appointments\n        .filter(appointment => appointment.patient_id === patientId)\n        .sort((a, b) => new Date(b.appointment_datetime) - new Date(a.appointment_datetime));\n};\n\nexport const getPatientDiagnosis = (diagnosis, patientId) => {\n    // For diagnosis, we need to find matching through medicineRecord_id or patient relation\n    // Since we don't have direct patient_id in diagnosis, we'll return all for now\n    return diagnosis.slice(0, 5); // Return first 5 diagnosis as example\n};\n\nexport const getPatientStats = (appointments, diagnosis, patientId) => {\n    const patientAppointments = getPatientAppointments(appointments, patientId);\n    const patientDiagnosis = getPatientDiagnosis(diagnosis, patientId);\n    \n    return {\n        totalAppointments: patientAppointments.length,\n        completedAppointments: patientAppointments.filter(apt => apt.status === 'Completed').length,\n        pendingAppointments: patientAppointments.filter(apt => apt.status === 'Pending').length,\n        confirmedAppointments: patientAppointments.filter(apt => apt.status === 'Confirmed').length,\n        totalDiagnosis: patientDiagnosis.length\n    };\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}